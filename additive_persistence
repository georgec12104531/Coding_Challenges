Have the function AdditivePersistence(num) take the num 
parameter being passed which will always be a positive 
integer and return its additive persistence which is the 
number of times you must add the digits in num until 
you reach a single digit. For example: if num is 2718 
then your program should return 2 because 
2 + 7 + 1 + 8 = 18 and 1 + 8 = 9 and you stop at 9. 

# Input: Integer
# Output: Count

# - num_dup = num
# - Covert num into a string
# until new_num.to_s.length < 10
# - new num = string.chars.map(&:to_i).reduce(:+)

def AdditivePersistence(num)
    return 0 if num.to_s.length < 2 
    the_num = num.to_s
    count = 0
    until the_num.length < 2
        the_num = the_num.chars.map(&:to_i).reduce(:+).to_s
        count += 1 
    end
    count
