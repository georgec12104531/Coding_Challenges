#first round

def factors_square_sum(n)
	(1..n).select { |num| n % num == 0 }
	.map {|num| num ** 2}
	.reduce(:+)
end

def perfect_square(n)
	(1..n).each { |num| return num if num ** 2 == n } 
	return false 
end

def list_squared(m, n)
	final_array = []
	(m..n).each do |num|
		final_array << [num, factors_square_sum(num)] if perfect_square(factors_square_sum(num)) != false 
	end
	final_array
end

round_two

require 'set'

def list_squared(m, n)
  (m..n).map do |num|
    divisors = Set.new((1..Math.sqrt(num)).select { |d| num % d == 0 })
    divisors += divisors.map { |d| num / d } 

    p sum_sq_divisors = divisors.map { |d| d * d }.inject(:+)
    [num, sum_sq_divisors] if Math.sqrt(sum_sq_divisors) % 1 == 0
  end.compact
end

final_round

def listed_square(m, n)
	(m..n).map do |num|
		divisors = (1..num).select { |n| num % n == 0 }
		div_sq = divisors.map { |n| n * n }.reduce(:+)
		[num, div_sq] if Math.sqrt(div_sq) % 1 == 0 
	end.compact
end


